plugins {
    id 'application'
}

dependencies {
    implementation project(':common')
    implementation 'com.zeroc:ice:3.7.10'
    implementation 'org.postgresql:postgresql:42.7.2'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// =======================
// JAR ejecutable para LoadBalancer
// =======================
tasks.register('buildLoadBalancerJar', Jar) {
    group = 'build'
    description = 'Construye el JAR ejecutable de LoadBalancerServer.'
    archiveFileName = "loadbalancer-server.jar"
    destinationDirectory = file("$buildDir/libs")

    manifest {
        attributes 'Main-Class': 'server.service.LoadBalancerServer'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    with jar
}

// =======================
// JAR ejecutable para VoteStation
// =======================
tasks.register('buildVoteStationJar', Jar) {
    group = 'build'
    description = 'Construye el JAR ejecutable de VoteStationServer.'
    archiveFileName = "votestation-server.jar"
    destinationDirectory = file("$buildDir/libs")

    manifest {
        attributes 'Main-Class': 'server.service.VoteStationServer'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    with jar
}

// =======================
// JAR ejecutable para QueryStation
// =======================
tasks.register('buildQueryStationJar', Jar) {
    group = 'build'
    description = 'Construye el JAR ejecutable de QueryStationServer.'
    archiveFileName = "querystation-server.jar"
    destinationDirectory = file("$buildDir/libs")

    manifest {
        attributes 'Main-Class': 'server.service.QueryStationServer'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    with jar
}

// =======================
// Tareas para ejecutar desde Gradle
// =======================
tasks.register('runServerApp', JavaExec) {
    group = "Application"
    description = "Ejecuta el servidor principal ServerApp."
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'server.ServerApp'
}

tasks.register('runLoadBalancer', JavaExec) {
    group = "Application"
    description = "Ejecuta LoadBalancerServer."
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'server.service.LoadBalancerServer'
    args '--Ice.Config=config.server'
}

tasks.register('runVoteStation', JavaExec) {
    group = "Application"
    description = "Ejecuta VoteStationServer."
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'server.service.VoteStationServer'
}

tasks.register('runQueryStation', JavaExec) {
    group = "Application"
    description = "Ejecuta QueryStationServer."
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'server.service.QueryStationServer'
}

tasks.register('runTestClient', JavaExec) {
    group = "Application"
    description = "Ejecuta TestClient."
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'server.TestClient'
}

tasks.register('runTestClientFraude', JavaExec) {
    group = "Application"
    description = "Ejecuta TestClientFraude."
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'server.TestClientFraude'
}

tasks.register('runTestClientQuery', JavaExec) {
    group = "Application"
    description = "Ejecuta TestClientQuery."
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'server.TestClientQuery'
}

tasks.register('runDBTest', JavaExec) {
    group = "Application"
    description = "Ejecuta pruebas sobre Database."
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'server.DBTest'
}
